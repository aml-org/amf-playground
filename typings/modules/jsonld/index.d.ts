// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-es6-promise/fb04188767acfec1defd054fc8024fafa5cd4de7/dist/es6-promise.d.ts
declare module '~jsonld~es6-promise' {
export interface Thenable <R> {
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
}

export class Promise <R> implements Thenable <R> {
  /**
   * If you call resolve in the body of the callback passed to the constructor,
   * your promise is fulfilled with result object passed to resolve.
   * If you call reject your promise is rejected with the object passed to resolve.
   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
   * Any errors thrown in the constructor callback will be implicitly passed to reject().
   */
  constructor (callback: (resolve : (value?: R | Thenable<R>) => void, reject: (error?: any) => void) => void);

  /**
   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
   * If an error is thrown in the callback, the returned promise rejects with that error.
   *
   * @param onFulfilled called when/if "promise" resolves
   * @param onRejected called when/if "promise" rejects
   */
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<U>;

  /**
   * Sugar for promise.then(undefined, onRejected)
   *
   * @param onRejected called when/if "promise" rejects
   */
  catch <U> (onRejected?: (error: any) => U | Thenable<U>): Promise<U>;

  /**
   * Make a new promise from the thenable.
   * A thenable is promise-like in as far as it has a "then" method.
   */
  static resolve (): Promise<void>;
  static resolve <R> (value: R | Thenable<R>): Promise<R>;

  /**
   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
   */
  static reject <R> (error: any): Promise<R>;

  /**
   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
   * the array passed to all can be a mixture of promise-like objects and other objects.
   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
   */
  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
  static all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
  static all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
  static all<T1, T2, T3, T4, T5, T6>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
  static all<T1, T2, T3, T4, T5>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
  static all<T1, T2, T3, T4>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
  static all<T1, T2, T3>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>]): Promise<[T1, T2, T3]>;
  static all<T1, T2>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>]): Promise<[T1, T2]>;
  static all<T1>(values: [T1 | Thenable<T1>]): Promise<[T1]>;
  static all<TAll>(values: Array<TAll | Thenable<TAll>>): Promise<TAll[]>;

  /**
   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
   */
  static race <R> (promises: (R | Thenable<R>)[]): Promise<R>;
}

/**
 * The polyfill method will patch the global environment (in this case to the Promise name) when called.
 */
export function polyfill (): void;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/types/npm-jsonld/69bc74f02e2b0a023a076901e53091ed70c2bf6f/js/jsonld.d.ts
declare module 'jsonld' {
import { Promise } from '~jsonld~es6-promise';

export interface JsonLdObject {
  [key: string]: JsonLdPrimitive | JsonLdPrimitive[];
}

export type JsonLdPrimitive = string | number | boolean | JsonLd;

export type JsonLd = JsonLdObject | JsonLdObject[];

export interface JsonLdCallback {
  (err: Error | null, success: JsonLd): void;
}

export interface DocumentObject {
  contextUrl?: string;
  document: string;
  documentUrl: string;
}

export interface DocumentLoader {
  (url: string, callback: (err: Error | null, documentObject: DocumentObject) => void): void;
}

export interface NormalizeOptions {
  algorithm?: string;
  base?: string;
  expandContext?: any;
  inputFormat?: string;
  format?: string;
  documentLoader?: DocumentLoader;
}

export interface CompactOptions {
  base?: string;
  compactArrays?: boolean;
  graph?: boolean;
  expandContext?: any;
  skipExpansion?: boolean;
  documentLoader?: DocumentLoader;
}

export interface ExpandOptions {
  base?: string;
  expandContext?: any;
  keepFreeFloatingNodes?: boolean;
  documentLoader?: DocumentLoader;
}

export interface FlattenOptions {
  base?: string;
  expandContext?: any;
  documentLoader?: DocumentLoader;
}

export interface FrameOptions {
  base?: string;
  expandContext?: any;
  embed?: EmbedEnum;
  explicit?: boolean;
  requireAll?: boolean;
  omitDefault?: boolean;
  documentLoader?: DocumentLoader;
}

export type EmbedEnum = '@last' | '@always' | '@never' | '@link';

export interface ToRdfOptions {
  base?: string;
  expandContext?: any;
  format?: string;
  produceGeneralizedRdf?: boolean;
  documentLoader?: DocumentLoader;
}

export interface FromRdfOptions {
  rdfParser?: any;
  format?: string;
  useRdfType?: boolean;
  useNativeTypes?: boolean;
  documentLoader?: DocumentLoader;
}

export type RDFParser = ((input: string) => JsonLd) | ((input: string, callback: (err: Error | null, dataset: JsonLd) => void) => void);

/**
 * Compact a document according to a particular context.
 * See: http://json-ld.org/spec/latest/json-ld/#compacted-document-form
 */
export function compact (doc: JsonLd | string, context: JsonLd | string, callback: JsonLdCallback): void;
export function compact (doc: JsonLd | string, context: JsonLd | string, options: CompactOptions, callback: JsonLdCallback): void;

/**
 * Expand a document, removing its context.
 * See: http://json-ld.org/spec/latest/json-ld/#expanded-document-form
 */
export function expand (compacted: JsonLd | string, callback: JsonLdCallback): void;
export function expand (compacted: JsonLd | string, options: ExpandOptions, callback: JsonLdCallback): void;

/**
 * Flatten a document.
 * See: http://json-ld.org/spec/latest/json-ld/#flattened-document-form
 */
export function flatten (doc: JsonLd, callback: JsonLdCallback): void;
export function flatten (doc: JsonLd, options: FlattenOptions, callback: JsonLdCallback): void;

/**
 * Frame a document.
 * See: http://json-ld.org/spec/latest/json-ld-framing/#introduction
 */
export function frame (doc: JsonLd, frame: JsonLd, callback: JsonLdCallback): void;
export function frame (doc: JsonLd, frame: JsonLd, options: FrameOptions, callback: JsonLdCallback): void;

/**
 * Normalize a document using the RDF Dataset Normalization Algorithm (URDNA2015).
 * See: http://json-ld.github.io/normalization/spec/
 */
export function normalize (doc: JsonLd, callback: JsonLdCallback): void;
export function normalize (doc: JsonLd, options: NormalizeOptions, callback: JsonLdCallback): void;

/**
 * Serialize a document to N-Quads (RDF).
 */
export function toRDF (doc: JsonLd, callback: JsonLdCallback): void;
export function toRDF (doc: JsonLd, options: ToRdfOptions, callback: JsonLdCallback): void;

/**
 * Deserialize N-Quads (RDF) to JSON-LD.
 */
export function fromRDF (nquads: string, callback: JsonLdCallback): void;
export function fromRDF (nquads: string, options: FromRdfOptions, callback: JsonLdCallback): void;

/**
 * Register a custom async-callback-based RDF parser.
 */
export function registerRDFParser (contentType: string, parser: RDFParser): void;

export const promises: JsonLdProcessor;

export class JsonLdProcessor {
  /**
   * Compact a document according to a particular context.
   * See: http://json-ld.org/spec/latest/json-ld/#compacted-document-form
   */
  compact (doc: JsonLd | string, context: JsonLd | string, options?: CompactOptions): Promise<JsonLd>;

  /**
   * Expand a document, removing its context.
   * See: http://json-ld.org/spec/latest/json-ld/#expanded-document-form
   */
  expand (compacted: JsonLd | string, options?: ExpandOptions): Promise<JsonLd>;

  /**
   * Flatten a document.
   * See: http://json-ld.org/spec/latest/json-ld/#flattened-document-form
   */
  flatten (doc: JsonLd, options?: FlattenOptions): Promise<JsonLd>;

  /**
   * Frame a document.
   * See: http://json-ld.org/spec/latest/json-ld-framing/#introduction
   */
  frame (doc: JsonLd, frame: JsonLd, options?: FrameOptions): Promise<JsonLd>;

  /**
   * Normalize a document using the RDF Dataset Normalization Algorithm (URDNA2015).
   * See: http://json-ld.github.io/normalization/spec/
   */
  normalize (doc: JsonLd, options?: NormalizeOptions): Promise<JsonLd>;

  /**
   * Serialize a document to N-Quads (RDF).
   */
  toRDF (doc: JsonLd, options?: ToRdfOptions): Promise<string>;

  /**
   * Deserialize N-Quads (RDF) to JSON-LD.
   */
  fromRDF (nquads: string, options?: FromRdfOptions): Promise<JsonLd>;
}
}
